import {
  require_jsx_runtime
} from "./chunk-5AS4NL4J.js";
import {
  require_react
} from "./chunk-RUPNRBO7.js";
import {
  __toESM
} from "./chunk-DC5AMYBS.js";

// node_modules/@strapi/blocks-react-renderer/dist/BlocksRenderer.js
var import_jsx_runtime3 = __toESM(require_jsx_runtime(), 1);
var React2 = __toESM(require_react(), 1);

// node_modules/@strapi/blocks-react-renderer/dist/Block.js
var import_jsx_runtime2 = __toESM(require_jsx_runtime(), 1);
var import_react = __toESM(require_react(), 1);

// node_modules/@strapi/blocks-react-renderer/dist/Text.js
var import_jsx_runtime = __toESM(require_jsx_runtime(), 1);
var React = __toESM(require_react(), 1);
var replaceLineBreaks = (text) => {
  const split = text.split(/\r?\n|\r/g);
  return (0, import_jsx_runtime.jsx)(import_jsx_runtime.Fragment, { children: split.map((part, idx) => (0, import_jsx_runtime.jsxs)(React.Fragment, { children: [
    idx > 0 && (0, import_jsx_runtime.jsx)("br", {}),
    part
  ] }, idx)) });
};
var Text = ({ text, ...modifiers }) => {
  const { modifiers: modifierComponents, missingModifierTypes } = useComponentsContext();
  const modifierNames = Object.keys(modifiers);
  return modifierNames.reduce(
    (children, modifierName) => {
      if (!modifiers[modifierName]) {
        return children;
      }
      const ModifierComponent = modifierComponents[modifierName];
      if (!ModifierComponent) {
        if (!missingModifierTypes.includes(modifierName)) {
          console.warn(
            `[@strapi/block-react-renderer] No component found for modifier "${modifierName}"`
          );
          missingModifierTypes.push(modifierName);
        }
        return children;
      }
      return (0, import_jsx_runtime.jsx)(ModifierComponent, { children });
    },
    // By default, return the text without any wrapper to avoid useless nesting
    replaceLineBreaks(text)
  );
};

// node_modules/@strapi/blocks-react-renderer/dist/Block.js
var voidTypes = ["image"];
var augmentProps = (content) => {
  const { children: childrenNodes, type, ...props } = content;
  if (type === "code") {
    const getPlainText = (children) => {
      return children.reduce((currentPlainText, node) => {
        if (node.type === "text") {
          return currentPlainText.concat(node.text);
        }
        if (node.type === "link") {
          return currentPlainText.concat(getPlainText(node.children));
        }
        return currentPlainText;
      }, "");
    };
    return {
      ...props,
      plainText: getPlainText(content.children)
    };
  }
  return props;
};
var Block = ({ content }) => {
  const { children: childrenNodes, type, ...props } = content;
  const { blocks, missingBlockTypes } = useComponentsContext();
  const BlockComponent = blocks[type];
  if (!BlockComponent) {
    if (!missingBlockTypes.includes(type)) {
      console.warn(`[@strapi/block-react-renderer] No component found for block type "${type}"`);
      missingBlockTypes.push(type);
    }
    return null;
  }
  if (voidTypes.includes(type)) {
    return (0, import_jsx_runtime2.jsx)(BlockComponent, { ...props });
  }
  if (type === "paragraph" && childrenNodes.length === 1 && childrenNodes[0].type === "text" && childrenNodes[0].text === "") {
    return (0, import_jsx_runtime2.jsx)("br", {});
  }
  const augmentedProps = augmentProps(content);
  return (0, import_jsx_runtime2.jsx)(BlockComponent, { ...augmentedProps, children: childrenNodes.map((childNode, index) => {
    if (childNode.type === "text") {
      const { type: _type, ...childNodeProps } = childNode;
      return (0, import_react.createElement)(Text, { ...childNodeProps, key: index });
    }
    return (0, import_jsx_runtime2.jsx)(Block, { content: childNode }, index);
  }) });
};

// node_modules/@strapi/blocks-react-renderer/dist/BlocksRenderer.js
var defaultComponents = {
  blocks: {
    paragraph: (props) => (0, import_jsx_runtime3.jsx)("p", { children: props.children }),
    quote: (props) => (0, import_jsx_runtime3.jsx)("blockquote", { children: props.children }),
    code: (props) => (0, import_jsx_runtime3.jsx)("pre", { children: (0, import_jsx_runtime3.jsx)("code", { children: props.plainText }) }),
    heading: ({ level, children }) => {
      switch (level) {
        case 1:
          return (0, import_jsx_runtime3.jsx)("h1", { children });
        case 2:
          return (0, import_jsx_runtime3.jsx)("h2", { children });
        case 3:
          return (0, import_jsx_runtime3.jsx)("h3", { children });
        case 4:
          return (0, import_jsx_runtime3.jsx)("h4", { children });
        case 5:
          return (0, import_jsx_runtime3.jsx)("h5", { children });
        case 6:
          return (0, import_jsx_runtime3.jsx)("h6", { children });
      }
    },
    link: (props) => (0, import_jsx_runtime3.jsx)("a", { href: props.url, children: props.children }),
    list: (props) => {
      if (props.format === "ordered") {
        return (0, import_jsx_runtime3.jsx)("ol", { children: props.children });
      }
      return (0, import_jsx_runtime3.jsx)("ul", { children: props.children });
    },
    "list-item": (props) => (0, import_jsx_runtime3.jsx)("li", { children: props.children }),
    image: (props) => (0, import_jsx_runtime3.jsx)("img", { src: props.image.url, alt: props.image.alternativeText || void 0 })
  },
  modifiers: {
    bold: (props) => (0, import_jsx_runtime3.jsx)("strong", { children: props.children }),
    italic: (props) => (0, import_jsx_runtime3.jsx)("em", { children: props.children }),
    underline: (props) => (0, import_jsx_runtime3.jsx)("u", { children: props.children }),
    strikethrough: (props) => (0, import_jsx_runtime3.jsx)("del", { children: props.children }),
    code: (props) => (0, import_jsx_runtime3.jsx)("code", { children: props.children })
  },
  missingBlockTypes: [],
  missingModifierTypes: []
};
var ComponentsContext = React2.createContext(defaultComponents);
var ComponentsProvider = ({ children, value = defaultComponents }) => {
  const memoizedValue = React2.useMemo(() => value, [value]);
  return (0, import_jsx_runtime3.jsx)(ComponentsContext.Provider, { value: memoizedValue, children });
};
function useComponentsContext() {
  return React2.useContext(ComponentsContext);
}
var BlocksRenderer = (props) => {
  const blocks = {
    ...defaultComponents.blocks,
    ...props.blocks
  };
  const modifiers = {
    ...defaultComponents.modifiers,
    ...props.modifiers
  };
  const missingBlockTypes = React2.useRef([]);
  const missingModifierTypes = React2.useRef([]);
  return (0, import_jsx_runtime3.jsx)(
    ComponentsProvider,
    {
      value: {
        blocks,
        modifiers,
        missingBlockTypes: missingBlockTypes.current,
        missingModifierTypes: missingModifierTypes.current
      },
      children: props.content.map((content, index) => (0, import_jsx_runtime3.jsx)(Block, { content }, index))
    }
  );
};
export {
  BlocksRenderer
};
//# sourceMappingURL=@strapi_blocks-react-renderer.js.map
